// Generated by CoffeeScript 1.9.3
var _locationFormats, containsText, formatLocation, formatObject;

_locationFormats = {
  full: ['%(addressLine), %(city), %(state) %(zip)', ', '],
  fullGeocoded: ['%(addressLine), %(city), %(state) %(zip)@%(lat),%(lng)', ', '],
  fullMultiline: ['%(addressLine)\n%(city), %(state) %(zip)', '\n'],
  city: ['%(addressLine), %(city)', ', '],
  zip: ['%(addressLine), %(zip)', ', '],
  cityStateZip: ['%(city), %(state) %(zip)', ''],
  short: ['%(addressLine)', ', '],
  shortMultiline: ['%(addressLine)', '\n'],
  shortVague: ['%(vagueAddress)', ', ']
};

formatObject = function(obj, formatString) {
  var paramRegex;
  paramRegex = /%\((\w+)\)/g;
  return formatString.replace(paramRegex, function(match, key) {
    return obj[key] || '';
  });
};

containsText = function(string) {
  return !!(string != null ? string.trim().length : void 0);
};

module.exports = formatLocation = function(location, formatString) {
  var addressLineSeparator, coords, format, ref, ref1, ref2, ref3;
  if (!(location.city && location.zip && location.state)) {
    return location.address;
  }
  ref = _locationFormats[formatString] || [formatString, ', '], format = ref[0], addressLineSeparator = ref[1];
  location = JSON.parse(JSON.stringify(location));
  location.addressLine = [location.address, location.address2].filter(containsText).join(addressLineSeparator);
  location.vagueAddress = location.vagueAddress || location.addressLine;
  coords = (ref1 = location.coordinates) != null ? ref1 : location.coords;
  location.lat = (ref2 = coords != null ? coords.latitude : void 0) != null ? ref2 : coords != null ? coords.lat : void 0;
  location.lng = (ref3 = coords != null ? coords.longitude : void 0) != null ? ref3 : coords != null ? coords.lng : void 0;
  return formatObject(location, format);
};

formatLocation.formats = _locationFormats;
